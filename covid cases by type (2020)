{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "type\n",
      "death         223975\n",
      "recovered    3375427\n",
      "active       5116032\n",
      "Name: cases, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd \n",
    "%matplotlib notebook  \n",
    "%matplotlib inline\n",
    "\n",
    "#load data in pandas\n",
    "url = 'https://raw.githubusercontent.com/RamiKrispin/coronavirus/master/csv/coronavirus.csv'\n",
    "df = pd.read_csv(url, header = 0,\n",
    "                usecols = ['country', 'type', 'cases'])        \n",
    "\n",
    "#transforms dataframe\n",
    "df = df[(df.country == 'US')]   #filter US data by type only        \n",
    "df_us = df.groupby('type')['cases'].sum()  # counts type of cases \n",
    "\n",
    "##print(df_us) ##check 1\n",
    "\n",
    "df_us['active'] = df_us['confirmed'] - df_us['recovered'] #creates \"active\" variable\n",
    "\n",
    "df_us = df_us.drop(['confirmed']) #removes \"confirmed\", b/c confirmed can be counted twice\n",
    "\n",
    "df_us.values #gets cases as values        \n",
    "df_us.index   #gets index labels, which are they 'types' (death, recovered, active)\n",
    "\n",
    "print(df_us) ##check 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'COVID-19 Cases in the US by Type')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(6, 6))          # initiate a fixed-size figure with one axes only\n",
    "\n",
    "#makes pie chart\n",
    "ax.pie(x = df_us.values,   #size of each type         \n",
    "       labels = df_us.index,      \n",
    "       autopct = '%1.1f%%')  #percentages the values\n",
    "\n",
    "#ensures \n",
    "ax.axis('equal')                 \n",
    "ax.set_title('COVID-19 Cases in the US by Type')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 2\n",
    "I used the same class COVID dataset because my project's variables are continuous "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0, 0.5, 'Count'),\n",
       " Text(0.5, 0, 'Type of Cases'),\n",
       " Text(0.5, 1.0, 'COVID-19 Cases in the USA by Type')]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#same code as above, only showing US cases (for simplicity)\n",
    "\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd \n",
    "%matplotlib notebook  \n",
    "%matplotlib inline\n",
    "url = 'https://raw.githubusercontent.com/RamiKrispin/coronavirus/master/csv/coronavirus.csv'\n",
    "df = pd.read_csv(url, header = 0,\n",
    "                usecols = ['country', 'type', 'cases'])        \n",
    "df = df[(df.country == 'US')]           \n",
    "df_us = df.groupby('type')['cases'].sum()   \n",
    "df_us['active'] = df_us['confirmed'] - df_us['recovered'] \n",
    "df_us = df_us.drop(['confirmed']) \n",
    "df_us.values    #      \n",
    "df_us.index   \n",
    "\n",
    "#bar graph\n",
    "fig, ax = plt.subplots()            \n",
    "ax.bar(x = df_us.index,    \n",
    "       height = df_us.values)  \n",
    "ax.set(xlabel = 'Type of Cases',\n",
    "      ylabel = 'Count',\n",
    "      title = 'COVID-19 Cases in the USA by Type')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
